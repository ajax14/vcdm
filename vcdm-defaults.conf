#############################################################
###                 GENERAL CONFIGURATION                 ### 
#############################################################

[general]
# Comma separated list of blob backends. Each entry must correspond to a 
# separate section with configuration
blob.backends = home_1,office_1

# Choose default blob backend to use if a user did not specify her desire. 
blob.default.backend = home_1

# (Optional - only if support_mq is set to 'yes'). 
# Choose which backend to use for message queue operations. Available options are listed below. 
# options: amqp, aws, azure
mq.backend = amqp

# Pick backend for datastore. Datastore is used for storing all kinds of metadata. 
# It is also used for implementing support of CDMI containers. 
# options: couchdb
ds.backend = couchdb

# Choose interface and port for production (TLS + AuthN) endpoint.
# Should be accesses through HTTPS
server.endpoint = localhost:8080
server.credentials.key = /etc/cdmiproxy/server_credentials/key.pem
server.credentials.cert = /etc/cdmiproxy/server_credentials/cert.pem

# Debug endpoint is used to provide unencrypted and unauthenticated access to resources.
server.use_debug_port = yes

# Port where to run debug interface (listens on all interfaces).
server.debug_port = 2364
# debug port with authn
server.debug_port_authn = 2365

# Authorization mechanism
# a file with activated usernames:password (password is stored in plaintext)
usersdb.plaintext = /etc/cdmiproxy/users.db
# a file with activated usernames:password (password is stored as md5 hexdigest)
usersdb.md5 = /etc/cdmiproxy/users.db.md5
# options: dummy, strict
server.authz = strict

# logs
common_log = vcdm.log
accounting_log = accounting.log

# Accounting
# frequency of gathering aggregated storage information in seconds
accounting.total_frequency = 600.0


# Consistency checks
check_for_existing_parents = yes

# Traffic Redundancy Elimination (TRE) support (EXPERIMENTAL)
tre_enabled = no
tre_server = http://localhost:5000
tre_data_folder = /path/to/tredata

#############################################################
###                 BACKEND CONFIGURATION                 ### 
#############################################################

# blob backend 1
[home_1]
# options: aws, local, azure, cdmi
type = local
blob.datadir = data

[office_1]
# options: aws, local, azure, cdmi
type = local
blob.datadir = data


[amqp]
# If MQ with AMQP backend is turned on, provide credentials for accessing AMQP-compatible engine.
mq.endpoint = localhost:5672
mq.username = guest
mq.password = guest

[couchdb]
# Datastore implementation on top of CouchDB.
datastore.endpoint = http://localhost:5984/

#############################################################
###                  BACKEND TEMPLATES                    ### 
#############################################################

[local]
type = local
# If local backend for blob was chosen, specify path to 
# the folder where blob's content shall be stored.
blob.datadir = data

[aws]
type = aws
# For blob and mq backends also Amazon Web Services could be used. 
# Provide your access key and secret access key to be able to use the service.
credentials.username = ACCESSKEYID
credentials.password = SECRETACCESSKEY
aws.bucket_name = cdmi-proxy

[azure]
type = azure
# To be able to use MS Azure cloud for MQ and blob backends, provide your Azure data credentials.
credentials.account = ACCOUNTNAME
credentials.password = SECRETACCESSKEY
credentials.blob_url = blob.core.windows.net
credentials.table_url = table.core.windows.net
credentials.queue_url = queue.core.windows.net
azure.bucket_name = cdmi-proxy

[cdmi]
type = cdmi
# CDMI-backends
credentials.username = aaa
credentials.password = aaa
cdmi.endpoint = http://localhost:8082/
